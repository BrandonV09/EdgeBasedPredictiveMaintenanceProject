# src/train_centroid.py
import os, numpy as np, pandas as pd
IN_CSV   = 'results/features_12k_IR021.csv'
OUT_HDR  = 'firmware/model_params.h'
FEATURES = ['rms','ptp','kurtosis','dominant_hz']
PCT = 99.5  # threshold = 99.5th percentile of normal distances

print("Training centroid model (per-feature scales + holdout)...")
df = pd.read_csv(IN_CSV).dropna(subset=FEATURES+['label'])

# simple holdout by file: keep last 20% of each file for test
def add_split(g):
    n = len(g)
    g = g.copy()
    g['split'] = 'train'
    g.iloc[int(n*0.8):, g.columns.get_loc('split')] = 'test'
    return g
df = df.groupby('file', group_keys=False).apply(add_split)

train = df[df['split']=='train']
test  = df[df['split']=='test']

# centroid on TRAIN normals
norm_train = train[train.label==0].copy()
mu = norm_train[FEATURES].mean().values

# per-feature scales: fit roughly into int16 range
max_abs = np.maximum(np.abs(train[FEATURES]).max().values, 1e-9)
scales = np.floor(30000.0 / max_abs).astype(int)  # per-feature
scales[scales<1] = 1

def to_int_rows(X):
    return (X.values * scales).round().astype(np.int32)

mu_int  = (mu * scales).round().astype(np.int32)

def dist2_int(X):
    Xi = to_int_rows(X)
    d  = Xi - mu_int
    return np.sum(d.astype(np.int64)*d.astype(np.int64), axis=1)

# distances on TRAIN normals -> threshold
d_norm_train  = dist2_int(norm_train[FEATURES])
thresh = int(np.percentile(d_norm_train, PCT))

# Evaluate on TEST
norm_test  = test[test.label==0]
fault_test = test[test.label==1]
d_norm_test  = dist2_int(norm_test[FEATURES])
d_fault_test = dist2_int(fault_test[FEATURES])

far = float((d_norm_test > thresh).mean())   # false alarm rate on normals
tpr = float((d_fault_test > thresh).mean())  # detection rate on faults
acc = float(((pd.concat([norm_test.assign(pred=d_norm_test>thresh),
                         fault_test.assign(pred=d_fault_test>thresh)])
             .eval('pred == (label==1)')).mean()))

print(f"Centroid (int): {mu_int}")
print(f"Scales: {scales.tolist()}")
print(f"Threshold: {thresh}")
print(f"False-alarm (normals, test): {far:.3f}")
print(f"Detection (faults, test):    {tpr:.3f}")
print(f"Overall accuracy (test):     {acc:.3f}")

os.makedirs('firmware', exist_ok=True)
with open(OUT_HDR, 'w') as f:
    f.write('// Auto-generated by train_centroid.py (per-feature scales)\n')
    f.write('#pragma once\n#include <stdint.h>\n\n')
    f.write(f'#define FEAT_DIM {len(FEATURES)}\n')
    f.write('static const int32_t FEAT_SCALES[FEAT_DIM] = { ' + ', '.join(map(str, scales.tolist())) + ' };\n')
    f.write('static const int32_t MU_INT[FEAT_DIM] = { ' + ', '.join(map(str, mu_int.tolist())) + ' };\n')
    f.write(f'static const uint64_t DIST2_THRESH = {thresh}ULL;\n')
    f.write('// Feature order: ' + ', '.join(FEATURES) + '\n')
print(f'âœ… Wrote {OUT_HDR}')
